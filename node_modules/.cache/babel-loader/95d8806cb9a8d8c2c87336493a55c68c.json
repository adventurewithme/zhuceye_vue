{"remainingRequest":"C:\\Users\\14619\\练习\\money\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\14619\\练习\\money\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\14619\\练习\\money\\src\\components\\js\\jquery.qrcode.js","dependencies":[{"path":"C:\\Users\\14619\\练习\\money\\src\\components\\js\\jquery.qrcode.js","mtime":1530566602000},{"path":"C:\\Users\\14619\\练习\\money\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\14619\\练习\\money\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\14619\\练习\\money\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function ($) {\n  $.fn.qrcode = function (options) {\n    // if options is string, \n    if (typeof options === 'string') {\n      options = {\n        text: options\n      };\n    } // set default values\n    // typeNumber < 1 for automatic calculation\n\n\n    options = $.extend({}, {\n      render: \"canvas\",\n      width: 256,\n      height: 256,\n      typeNumber: -1,\n      correctLevel: QRErrorCorrectLevel.H,\n      background: \"#ffffff\",\n      foreground: \"#000000\"\n    }, options);\n\n    var createCanvas = function createCanvas() {\n      // create the qrcode itself\n      var qrcode = new QRCode(options.typeNumber, options.correctLevel);\n      qrcode.addData(options.text);\n      qrcode.make(); // create canvas element\n\n      var canvas = document.createElement('canvas');\n      canvas.width = options.width;\n      canvas.height = options.height;\n      var ctx = canvas.getContext('2d'); // compute tileW/tileH based on options.width/options.height\n\n      var tileW = options.width / qrcode.getModuleCount();\n      var tileH = options.height / qrcode.getModuleCount(); // draw in the canvas\n\n      for (var row = 0; row < qrcode.getModuleCount(); row++) {\n        for (var col = 0; col < qrcode.getModuleCount(); col++) {\n          ctx.fillStyle = qrcode.isDark(row, col) ? options.foreground : options.background;\n          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);\n          var h = Math.ceil((row + 1) * tileH) - Math.floor(row * tileH);\n          ctx.fillRect(Math.round(col * tileW), Math.round(row * tileH), w, h);\n        }\n      } // return just built canvas\n\n\n      return canvas;\n    }; // from Jon-Carlos Rivera (https://github.com/imbcmdth)\n\n\n    var createTable = function createTable() {\n      // create the qrcode itself\n      var qrcode = new QRCode(options.typeNumber, options.correctLevel);\n      qrcode.addData(options.text);\n      qrcode.make(); // create table element\n\n      var $table = $('<table></table>').css(\"width\", options.width + \"px\").css(\"height\", options.height + \"px\").css(\"border\", \"0px\").css(\"border-collapse\", \"collapse\").css('background-color', options.background); // compute tileS percentage\n\n      var tileW = options.width / qrcode.getModuleCount();\n      var tileH = options.height / qrcode.getModuleCount(); // draw in the table\n\n      for (var row = 0; row < qrcode.getModuleCount(); row++) {\n        var $row = $('<tr></tr>').css('height', tileH + \"px\").appendTo($table);\n\n        for (var col = 0; col < qrcode.getModuleCount(); col++) {\n          $('<td></td>').css('width', tileW + \"px\").css('background-color', qrcode.isDark(row, col) ? options.foreground : options.background).appendTo($row);\n        }\n      } // return just built canvas\n\n\n      return $table;\n    };\n\n    return this.each(function () {\n      var element = options.render == \"canvas\" ? createCanvas() : createTable();\n      $(element).appendTo(this);\n    });\n  };\n})(jQuery);",{"version":3,"sources":["C:\\Users\\14619\\练习\\money\\src\\components\\js\\jquery.qrcode.js"],"names":["$","fn","qrcode","options","text","extend","render","width","height","typeNumber","correctLevel","QRErrorCorrectLevel","H","background","foreground","createCanvas","QRCode","addData","make","canvas","document","createElement","ctx","getContext","tileW","getModuleCount","tileH","row","col","fillStyle","isDark","w","Math","ceil","floor","h","fillRect","round","createTable","$table","css","$row","appendTo","each","element","jQuery"],"mappings":"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","sourcesContent":["(function( $ ){\n\t$.fn.qrcode = function(options) {\n\t\t// if options is string, \n\t\tif( typeof options === 'string' ){\n\t\t\toptions\t= { text: options };\n\t\t}\n\n\t\t// set default values\n\t\t// typeNumber < 1 for automatic calculation\n\t\toptions\t= $.extend( {}, {\n\t\t\trender\t\t: \"canvas\",\n\t\t\twidth\t\t: 256,\n\t\t\theight\t\t: 256,\n\t\t\ttypeNumber\t: -1,\n\t\t\tcorrectLevel\t: QRErrorCorrectLevel.H,\n                        background      : \"#ffffff\",\n                        foreground      : \"#000000\"\n\t\t}, options);\n\n\t\tvar createCanvas\t= function(){\n\t\t\t// create the qrcode itself\n\t\t\tvar qrcode\t= new QRCode(options.typeNumber, options.correctLevel);\n\t\t\tqrcode.addData(options.text);\n\t\t\tqrcode.make();\n\n\t\t\t// create canvas element\n\t\t\tvar canvas\t= document.createElement('canvas');\n\t\t\tcanvas.width\t= options.width;\n\t\t\tcanvas.height\t= options.height;\n\t\t\tvar ctx\t\t= canvas.getContext('2d');\n\n\t\t\t// compute tileW/tileH based on options.width/options.height\n\t\t\tvar tileW\t= options.width  / qrcode.getModuleCount();\n\t\t\tvar tileH\t= options.height / qrcode.getModuleCount();\n\n\t\t\t// draw in the canvas\n\t\t\tfor( var row = 0; row < qrcode.getModuleCount(); row++ ){\n\t\t\t\tfor( var col = 0; col < qrcode.getModuleCount(); col++ ){\n\t\t\t\t\tctx.fillStyle = qrcode.isDark(row, col) ? options.foreground : options.background;\n\t\t\t\t\tvar w = (Math.ceil((col+1)*tileW) - Math.floor(col*tileW));\n\t\t\t\t\tvar h = (Math.ceil((row+1)*tileH) - Math.floor(row*tileH));\n\t\t\t\t\tctx.fillRect(Math.round(col*tileW),Math.round(row*tileH), w, h);  \n\t\t\t\t}\t\n\t\t\t}\n\t\t\t// return just built canvas\n\t\t\treturn canvas;\n\t\t}\n\n\t\t// from Jon-Carlos Rivera (https://github.com/imbcmdth)\n\t\tvar createTable\t= function(){\n\t\t\t// create the qrcode itself\n\t\t\tvar qrcode\t= new QRCode(options.typeNumber, options.correctLevel);\n\t\t\tqrcode.addData(options.text);\n\t\t\tqrcode.make();\n\t\t\t\n\t\t\t// create table element\n\t\t\tvar $table\t= $('<table></table>')\n\t\t\t\t.css(\"width\", options.width+\"px\")\n\t\t\t\t.css(\"height\", options.height+\"px\")\n\t\t\t\t.css(\"border\", \"0px\")\n\t\t\t\t.css(\"border-collapse\", \"collapse\")\n\t\t\t\t.css('background-color', options.background);\n\t\t  \n\t\t\t// compute tileS percentage\n\t\t\tvar tileW\t= options.width / qrcode.getModuleCount();\n\t\t\tvar tileH\t= options.height / qrcode.getModuleCount();\n\n\t\t\t// draw in the table\n\t\t\tfor(var row = 0; row < qrcode.getModuleCount(); row++ ){\n\t\t\t\tvar $row = $('<tr></tr>').css('height', tileH+\"px\").appendTo($table);\n\t\t\t\t\n\t\t\t\tfor(var col = 0; col < qrcode.getModuleCount(); col++ ){\n\t\t\t\t\t$('<td></td>')\n\t\t\t\t\t\t.css('width', tileW+\"px\")\n\t\t\t\t\t\t.css('background-color', qrcode.isDark(row, col) ? options.foreground : options.background)\n\t\t\t\t\t\t.appendTo($row);\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t// return just built canvas\n\t\t\treturn $table;\n\t\t}\n  \n\n\t\treturn this.each(function(){\n\t\t\tvar element\t= options.render == \"canvas\" ? createCanvas() : createTable();\n\t\t\t$(element).appendTo(this);\n\t\t});\n\t};\n})( jQuery );\n"]}]}